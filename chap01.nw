@\section*{Introduction}

The following are solutions to (eventually all of) the exercises from
\emph{Homotopy Type Theory: Univalent Foundations of Mathematics}.  The Coq
code given alongside the by-hand solutions requires the HoTT version of Coq,
available \href{https://github.com/HoTT}{at the HoTT github repository}.  It
will be assumed throughout that it has been imported by

<<chap01.v>>=
Require Import HoTT.

@ The
\href{https://github.com/HoTT/book/blob/master/coq_introduction/Reading_HoTT_in_Coq.v}{introduction
to Coq from the HoTT repo} is assumed.  Each exercise has its own
\lstinline|Section| in the Coq file, so \lstinline|Context| declarations don't
extend beyond the exercise---and sometimes they're even more restricted than
that.

\section{Type Theory}

%DONE
\exer{1.1}{56}  Given functions $f:A\to B$ and $g:B\to C$, define
their \term{composite} $g \circ f : A \to C$.  Show that we have $h \circ (g
\circ f) \equiv (h \circ g) \circ f$.

\soln
Define $g \circ f \defeq \lam{x:A}g(f(x))$.  Then if $h:C \to D$, we
have
\[
  h \circ (g \circ f) 
  \equiv \lam{x:A}h((g \circ f)x)
  \equiv \lam{x:A}h((\lam{y:A}g(fy))x)
  \equiv \lam{x:A}h(g(fx))
\]
and
\[
  (h \circ g) \circ f 
  \equiv \lam{x:A}(h \circ g)(fx)
  \equiv \lam{x:A}(\lam{y:A}h(gy))(fx)
  \equiv \lam{x:A}h(g(fx))
\]
So $h \circ (g \circ f) \equiv (h \circ g) \circ f$.  In Coq, we have

<<chap01.v>>=
Section Exercise1.

Definition compose {A B C:Type} (g : B -> C) (f : A -> B) :=
    fun x => g (f x).

Theorem compose_assoc : forall (A B C D : Type) (f : A -> B) (g : B-> C) (h : C -> D),
    compose h (compose g f) = compose (compose h g) f.
Proof.
  trivial.
Qed.

End Exercise1.

@ %DONE
\exer{1.2}{56}  Derive the recursion principle for products $\rec{A
  \times B}$ using only the projections, and verify that the definitional
equalities are valid.  Do the same for $\Sigma$-types.

\soln The recursion principle states that we can define a function $f : A
\times B \to C$ by giving its value on pairs.  Suppose that we have projection
functions $\fst : A \times B \to A$ and $\snd : A \times B \to B$.  Then we can
define a function of type
\[
  \rec{A\times B} : \prd{C : \UU} (A \to B \to C) \to A \times B \to C
\]
in terms of these projections as follows
\[
  \rec{A \times B}'(C, g, p) \defeq 
  g(\fst p)(\snd p)
\]
or, in Coq,

<<chap01.v>>=
Section Exercise2_prd.

Variable A B : Type.

Definition recprod (C : Type) (g : A -> B -> C) (p : A * B) :=
    g (fst p) (snd p).

Goal recprod A (fun a => fun b => a) = fst. trivial. Qed.
Goal recprod B (fun a => fun b => b) = snd. trivial. Qed.

End Exercise2_prd.

Section Exercise2_sm.

Variable A : Type.
Variable B : A -> Type.

Definition recsm (C : Type) (g : forall (x : A), B x -> C) (p : exists (x : A), B x) :=
    g (projT1 p) (projT2 p).

End Exercise2_sm.

@ We must then show that
\begin{align*}
  \rec{A\times B}'(C, g, (a, b)) 
  \equiv g(\fst (a, b))(\snd (a, b))
  \equiv g(a)(b)
\end{align*}
which in Coq is also trivial:

Now for the $\Sigma$-types.  Here we have a projection
\[
  \fst : \left(\sm{x : A} B(x) \right) \to A
\]
and another
\[
  \snd : \prd{p : \sm{x : A} B(x)} B(\fst (p))
\]
Define a function of type 
\[
  \rec{\sm{x:A}B(x)} : \prd{C:\UU} \left(\tprd{x:A} B(x) \to C \right) \to
  \left(\tsm{x:A}B(x) \right) \to C
\]
by
\[
  \rec{\sm{x:A}B(x)}(C, g, p)
  \defeq
  g(\fst p)(\snd p)
\]
And in Coq,
We then verify that
\begin{align*}
  \rec{\sm{x:A}B(x)}(C, g, (a, b))
  \equiv g(\fst (a, b))(\snd (a, b))
  \equiv g(a)(b)
\end{align*}
which is again trivial in Coq:

%DONE
\exer{1.3}{56} Derive the induction principle for products $\ind{A \times B}$
using only the projections and the propositional uniqueness principle $\uppt$.
Verify that the definitional equalities are valid.  Generalize $\uppt$ to
$\Sigma$-types, and do the same for $\Sigma$-types.

\soln The induction principle has type
\[
  \ind{A\times B} : \prd{C: A\times B \to \UU}\left(\prd{x:A}\prd{y:B}C((x,
    y))\right) \to \prd{z:A\times B}C(z)
\]
For a first pass, we can define
\[
  \ind{A\times B}(C, g, z)
  \defeq
  g(\fst z)(\snd z)
\]
However, we have $g(\fst x)(\fst x) : C((\fst x, \snd x))$, so the type of this
$\ind{A \times B}$ is
\[
  \ind{A\times B} : \prd{C: A\times B \to \UU}\left(\prd{x:A}\prd{y:B}C((x,
    y))\right) \to \prd{z:A\times B}C((\fst z, \snd z))
\]
To define $\ind{A \times B}$ with the correct type, we need the
$\mathsf{transport}$ operation from the next chapter.  The uniqueness principle
for $A \times B$ is
\[
  \uppt : \prd{x : A \times B} \big((\fst x, \snd x) =_{A \times B} x\big)
\]
By the transport principle, there is a function
\[
  (\uppt\, x)_{*} : C((\fst x, \snd x)) \to C(x)
\]
so
\[
  \ind{A \times B}(C, g, z)
  \defeq
  (\uppt\, z)_{*}(g(\fst z)(\snd z))
\]
has the right type.
In Coq we first define $\uppt$, then use it with transport to give our
$\ind{A\times B}$.

We now have to show that
\[
  \ind{A \times B}(C, g, (a, b)) 
  \equiv g(a)(b)
\]
Unfolding the left gives
\begin{align*}
  \ind{A \times B}(C, g, (a, b)) 
  &\equiv
  (\uppt\, (a, b))_{*}(g(\fst (a, b))(\snd (a, b)))
  \\&\equiv
  \ind{=_{A \times B}}(D, d, (a, b), (a, b), \uppt((a, b)))(g(a)(b))
  \\&\equiv
  \ind{=_{A \times B}}(D, d, (a, b), (a, b), \refl{(a, b)})
  (g(a)(b))
  \\&\equiv
  \ind{=_{A \times B}}(D, d, (a, b), (a, b), \refl{(a, b)})
  (g(a)(b))
  \\&\equiv
  \mathsf{id}_{C((a, b))}(g(a)(b))
  \\&\equiv
  g(a)(b)
\end{align*}
which was to be proved.  In Coq, it's as trivial as always:

For $\Sigma$-types, we define
\[
  \ind{\tsm{x:A}B(x)} : \prd{C:(\tsm{x:A}B(x)) \to \UU}
  \left(\tprd{a:A}\tprd{b:B(a)}C((a, b))\right) \to \prd{p: \tsm{x:A}B(x)}C(p)
\]
at first pass by
\[
  \ind{\tsm{x:A}B(x)}(C, g, p)
  \defeq
  g(\fst p)(\snd p)
\]
We encounter a similar problem as before.  We need a uniqueness principle for
$\Sigma$-types, which would be a function
\[
  \upst : \prd{p : \sm{x:A}B(x)} \big(
    (\fst p, \snd p) =_{\sm{x:A}B(x)} p
  \big)
\]
As for product types, we can define
\[
  \upst((a, b)) \defeq \refl{(a, b)}
\]
which is well-typed, since $\fst(a, b) \equiv a$ and $\snd(a, b) \equiv b$.
Thus, we can write
\[
  \ind{\sm{x:A}B(x)}(C, g, p) \defeq (\upst\, p)_{*}(g(\fst p)(\snd b)).
\]
and in Coq,

Now we must verify that
\[
  \ind{\sm{x:A}B(x)}(C, g, (a, b)) \equiv g(a)(b)
\]
We have
\begin{align*}
  \ind{\sm{x:A}B(x)}(C, g, (a, b))
  &\equiv
  (\uppt\, (a, b))_{*}(g(\fst(a, b))(\snd(a, b)))
  \\&\equiv
  \ind{=_{\sm{x:A}B(x)}}(D, d, (a, b), (a, b), \uppt\, (a, b))
  (g(a)(b))
  \\&\equiv
  \ind{=_{\sm{x:A}B(x)}}(D, d, (a, b), (a, b), \refl{(a, b)})
  (g(a)(b))
  \\&\equiv
  \mathsf{id}_{C((a, b))}
  (g(a)(b))
  \\&\equiv
  g(a)(b)
\end{align*}
which Coq finds trivial:


%DONE
\exer{1.4}{56}  Assuming as given only the \emph{iterator} for natural numbers
\[
  \ite : 
  \prd{C:\UU} C \to (C \to C) \to \mathbb{N} \to C
\]                                                        
with the defining equations
\begin{align*}
  \ite(C, c_{0}, c_{s}, 0) &\defeq c_{0}, \\
  \ite(C, c_{0}, c_{s}, \suc(n)) &\defeq c_{s}(\ite(C, c_{0}, c_{s}, n)),
\end{align*}
derive a function having the type of the recursor $\rec{\mathbb{N}}$.  Show
that the defining equations of the recursor hold propositionally for this
function, using the induction principle for $\mathbb{N}$.

\soln  Fix some $C :
\UU$, $c_{0} : C$, and $c_{s} : \mathbb{N} \to C \to C$.
$\ite(C)$ allows for the $n$-fold application of a single function to a single
input from $C$, whereas $\rec{\mathbb{N}}$ allows each application to
depend on $n$, as well.  Since $n$ just tracks how many applications we've
done, we can construct $n$ on the fly, iterating over elements of $\mathbb{N}
\times C$.  So we will use the iterator
\[
  \ite_{\mathbb{N} \times C} : \mathbb{N} \times C \to (\mathbb{N} \times C
  \to \mathbb{N} \times C) \to \mathbb{N} \to \mathbb{N} \times C
\]
to derive a function
\[
  \Phi : \prd{C : \UU} C \to (\mathbb{N} \to C \to C) \to
  \mathbb{N} \to C
\]
which has the same type as $\rec{\mathbb{N}}$.  

The first argument of $\ite_{\mathbb{N} \times C}$ is the starting point,
which we'll make $(0, c_{0})$.  The second input takes an element of
$\mathbb{N} \times C$ as an argument and uses $c_{s}$ to construct a new
element of $\mathbb{N} \times C$.  We can use the first and second elements of
the pair as arguments for $c_{s}$, and we'll use $\suc$ to advance the second
argument, representing the number of steps taken.  This gives the function
\[
  \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)) 
  : \mathbb{N} \times C \to \mathbb{N} \times C
\]
for the second input to $\ite_{\mathbb{N} \times C}$.  The third input is just
$n$, which we can pass through.  Plugging these in gives
\[
  \ite_{\mathbb{N} \times C}\big(
  (0, c_{0}),
  \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
  n
  \big)
  : \mathbb{N} \times C
\]
from which we need to extract an element of $C$.  This is easily done with the
projection operator, so we have
\[
  \Phi_{C}(c_{0}, c_{s}, n) \defeq
  \snd\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    n
    \big)
  \bigg)
\]
which has the same type as $\rec{\mathbb{N}}$.  In Coq we first define the
iterator and then our alternative recursor:

Now to show that the defining equations hold propositionally for $\Phi$.  First
we need a small calculation about how the first element of the pair advances through
iteration.  That is, we will be interested in the function
\[
  \Theta(n) \defeq
  \fst\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    n
    \big)
  \bigg)
\]
We show that $\Theta(n) =_{\mathbb{N}} n$ is inhabited for all $n$, by
induction.  For the family 
\[
  E(n) \defeq (\Theta(n) =_{\mathbb{N}} n)
\]
The induction principle for $\mathbb{N}$ gives us a function
\[
  \ind{\mathbb{N}}(E) :
  E(0) \to \left(\tprd{n:\mathbb{N}} E(n) \to E(\suc(n))\right) \to
  \tprd{n:\mathbb{N}} E(n)
\]
which is just a functional version of usual notion of induction on
$\mathbb{N}$.  So for the base case, we show that
\[
  \Theta(0)
  \equiv
  \fst\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    0
    \big)
  \bigg)
  \equiv
  \fst(0, c_{0})
  \equiv 0
\]
Thus $\refl{0} : (\Theta(0) =_{\mathbb{N}} 0) \equiv E(0)$.  For the induction
step, we suppose that $n : \mathbb{N}$ and that $\refl{n} : E(n)$.  Unravelling the
definition a bit, we get
\begin{align*}
  &\phantom{\equiv}\Theta(\suc(n))
  \\&\equiv
  \fst\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    \suc(n)
    \big)
  \bigg)
  \\&\equiv
  \fst(\suc(\Theta(n)), c_{s}(\Theta(n), \Phi_{C}(c_{0}, c_{s}, n)))
  \\&\equiv
  \suc(\Theta(n))
\end{align*}
From which we conclude that $\refl{\Theta(\suc(n))} : \Theta(\suc(n))
=_{\mathbb{N}} \suc(\Theta(n))$.  To replace the $\Theta(n)$ on the right hand
side of this equality, we use $\refl{n}$ and the indiscernability of
identicals.  We have the family
\[
  F(m) \defeq (\Theta(\suc(n)) =_{\mathbb{N}} \suc(m))
\]
and the indiscernability of identicals gives us a function 
\[
  f : \prd{x, y, \mathbb{N}}\prd{p : x =_{\mathbb{N}} y} F(x) \to F(y)
\]
on the basis of this.  Plugging in the appropriate arguments, we obtain
\[
  f\left(\Theta(n), n, \refl{n}, \refl{\Theta(\suc(n))}\right) : F(n) \equiv
  (\Theta(\suc(n)) =_{\mathbb{N}} \suc(n))
  \equiv E(\suc(n))
\]
So, discharging the assumption of the induction step,
\[
  e \defeq \lam{n}{\refl{n}}f\left(\Theta(n), n, \refl{n}, \refl{\Theta(\suc(n))}\right)
  :
  \prd{n:\mathbb{N}}E(n) \to E(\suc(n))
\]
thus
\[
  \ind{\mathbb{N}}(E, \refl{0}, e) 
  : 
  \prd{n:\mathbb{N}} E(n)
  \equiv
  \prd{n:\mathbb{N}} (\Theta(n) =_{\mathbb{N}} n)
\]

We're now prepared to show that the definitional equalities hold
propositionally for $\Phi$.  To do this, we must show that
\begin{align*}
  \Phi_{C}(c_{0}, c_{s}, 0) &=_{C} c_{0} \\
  \prd{n:\mathbb{N}}\bigg(\Phi_{C}(c_{0}, c_{s}, \suc(n)) &=_{C} c_{s}(n,
  \Phi_{C}(c_{0}, c_{s}, n)) \bigg)
\end{align*}
are inhabited.  Since $C$, $c_{0}$, and $c_{s}$ are fixed, define
\[
  \Psi(n) \defeq \Phi_{C}(c_{0}, c_{s}, n)
\]
for brevity. The first equality is straightforward:
\[
  \Psi(0)
  \equiv
  \snd\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    0
    \big)
  \bigg)
  \equiv
  \snd(0, c_{0})
  \equiv
  c_{0}
\]
So $\refl{\Psi(0)} : \Psi(0) =_{C} c_{0}$.  This establishes
the first equality.  

Given the family
\[
  G(n) \defeq
  \Psi(\suc(n)) =_{C} c_{s}(n, \Psi(n)),
\]
the induction principle for $\mathbb{N}$ gives us a function
\[
  \ind{\mathbb{N}}(G) :
  G(0) \to \left(\tprd{n:\mathbb{N}} G(n) \to G(\suc(n))\right) \to
  \tprd{n:\mathbb{N}} G(n)
\]
In the base case,
\begin{align*}
  &\phantom{\equiv} \Psi(1)
  \\&\equiv
  \snd\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    1
    \big)
  \bigg)
  \\&\equiv
  \snd\bigg(
    \suc(\fst (0, c_{0})), c_{s}(\fst (0, c_{0}), \snd (0, c_{0}))
  \bigg)
  \\&\equiv
  c_{s}(0, c_{0})
\end{align*}
So $\refl{\Psi(1)} : G(0)$.  Now suppose that $n : \mathbb{N}$ and
$\refl{\Psi(\suc(n))} : G(n)$.  We have
\begin{align*}
  &\phantom{\equiv}\Psi(\suc(\suc(n))
  \\&\equiv
  \snd\bigg(
    \ite_{\mathbb{N} \times C}\big(
    (0, c_{0}),
    \lam{x}(\suc(\fst x), c_{s}(\fst x, \snd x)),
    \suc(\suc(n))
    \big)
  \bigg)
  \\&\equiv
  \snd\bigg(
    \suc(\Theta(\suc(n))), c_{s}(\Theta(\suc(n)), \Psi(\suc(n)))
  \bigg)
  \\&\equiv
  c_{s}(\Theta(\suc(n)), \Psi(\suc(n)))
\end{align*}
We can again use the indiscernability of identicals here.  Define the family
\[
  H(m) \defeq \Psi(\suc(\suc(n))) =_{C} c_{s}(m, \Psi(\suc(n))) 
\]
Then the indiscernability of identicals gives us a function
\[
  h: \prd{m, i : \mathbb{N}}\prd{p: m=_{\mathbb{N}} i} H(m) \to H(i)
\]
and
\[
  h(\Theta(\suc(n)), \suc(n), \ind{\mathbb{N}}(E, \refl{0}, g, \suc(n)))
  :
  \Psi(\suc(\suc(n))) =_{C} c_{s}(\suc(n), \Psi(\suc(n)))
\]
Abstracting out the context, we obtain an object
\[
  j : \prd{n:\mathbb{N}} G(n) \to G(\suc(n))
\]
So
\[
  \ind{\mathbb{N}}(G, \refl{\Psi(1)}, j) : \prd{n:\mathbb{N}} G(n)
  \equiv
  \prd{n:\mathbb{N}}\bigg(\Phi_{C}(c_{0}, c_{s}, \suc(n)) =_{C} c_{s}(n,
  \Phi_{C}(c_{0}, c_{s}, n)) \bigg)
\]
Thus proving the second equality propositionally.

In Coq, we can repeat this proof, but there's surely a better way.

%DONE
\exer{1.5}{56}  Show that if we define $A + B \defeq \sm{x:\bool}
\rec{\bool}(\UU, A, B, x)$, then we can give a definition of $\ind{A+B}$ for
which the definitional equalities stated in \S1.7 hold.

\soln  Define $A+B$ as stated.  We need to define a function of type
\[
  \ind{A+B}' : \prd{C : (A + B) \to \UU}
               \left( \tprd{a:A} C(\inl(a))\right)
               \to
               \left( \tprd{b:B} C(\inr(b))\right)
               \to
               \tprd{x : A + B} C(x)
\]
which means that we also need to define $\inl' : A \to A + B$ and $\inr' B \to
A + B$; these are
\begin{align*}
  \inl'(a) \defeq (0_{\bool}, a)
  \qquad\qquad
  \inr'(b) \defeq (1_{\bool}, b)
\end{align*}
In Coq, we can use \lstinline|sigT| to define \lstinline|coprd| as a
$\Sigma$-type:
Suppose that $C : A + B \to \UU$, $g_{0} : \prd{a:A} C(\inl'(a))$, $g_{1} :
\prd{b:B} C(\inr'(b))$, and $x : A+B$; we're looking to define
\[
  \ind{A+B}'(C, g_{0}, g_{1}, x)
\]
We will use $\ind{\sm{x:\bool}\rec{\bool}(\UU, A, B, x)}$, and for notational
convenience will write $\Phi \defeq \sm{x:\bool}\rec{\bool}(\UU, A, B, x)$.
$\ind{\Phi}$ has signature
\[
  \ind{\Phi} :
  \prd{C : (\Phi) \to \UU}
  \left(\tprd{x:\bool}\tprd{y:\rec{\bool}(\UU, A, B, x)}C((x, y))\right)
  \to
  \tprd{p:\Phi} C(p)
\]
So
\[
  \ind{\Phi}(C) : 
  \left(\tprd{x:\bool}\tprd{y:\rec{\bool}(\UU, A, B, x)}C((x, y))\right)
  \to
  \tprd{p:\Phi} C(p)
\]
To obtain something of type $\tprd{x:\bool}\tprd{y:\rec{\bool}(\UU, A, B,
  x)}C((x, y))$ we'll have to use $\ind{\bool}$.  In particular, for $B(x)
\defeq\prd{y:\rec{\bool}(\UU, A, B, x)}C((x, y))$ we have
\[
  \ind{\bool}(B)
  :
  B(0_{\bool})
  \to
  B(1_{\bool})
  \to
  \prd{x:\bool}
  B(x)
\]
along with
\[
  g_{0} :
  \prd{a:A} C(\inl'(a))
  \equiv
  \prd{a:\rec{\bool}(\UU, A, B, 0_{\bool})} C((0_{\bool}, a))
  \equiv
  B(0_{\bool})
\]
and similarly for $g_{1}$.  So
\[
  \ind{\bool}(B, g_{0}, g_{1}) : \prd{x:\bool}\prd{y:\rec{\bool}(\UU, A, B, x)}
  C((x, y))
\]
which is just what we needed for $\ind{\Phi}$.  So we define
\[
  \ind{A+B}'(C, g_{0}, g_{1}, x)
  \defeq
  \ind{\sm{x:\bool}\rec{\bool}(\UU, A, B, x)}\left(
    C,
    \ind{\bool}\left(
      \prd{y:\rec{\bool}(\UU, A, B, x)} C((x, y)),
      g_{0},
      g_{1}
    \right),
    x
  \right)
\]
and, in Coq, we use \lstinline|sigT_rect|, which is the built-in
$\lam{A}{B}\ind{\sm{x:A}B(x)}$:
\newpage

Now we must show that the definitional equalities
\begin{align*}
  \ind{A+B}'(C, g_{0}, g_{1}, \inl'(a)) \equiv g_{0}(a) \\
  \ind{A+B}'(C, g_{0}, g_{1}, \inr'(b)) \equiv g_{1}(b)
\end{align*}
hold.  For the first, we have
\begin{align*}
  \ind{A+B}'(C, g_{0}, g_{1}, \inl'(a)) 
  &\equiv
  \ind{A+B}'(C, g_{0}, g_{1}, (0_{\bool}, a)) 
  \\&\equiv
  \ind{\sm{x:\bool}\rec{\bool}(\UU, A, B, x)}\left(
    C,
    \ind{\bool}\left(
      \prd{y:\rec{\bool}(\UU, A, B, x)} C((x, y)),
      g_{0},
      g_{1}
    \right),
    (0_{\bool}, a)
  \right)
  \\&\equiv
    \ind{\bool}\left(
      \prd{y:\rec{\bool}(\UU, A, B, x)} C((x, y)),
      g_{0},
      g_{1},
      0_{\bool}
    \right)(a)
  \\&\equiv
      g_{0}(a)
\end{align*}
and for the second,
\begin{align*}
  \ind{A+B}'(C, g_{0}, g_{1}, \inr'(b)) 
  &\equiv
  \ind{A+B}'(C, g_{0}, g_{1}, (1_{\bool}, b)) 
  \\&\equiv
  \ind{\sm{x:\bool}\rec{\bool}(\UU, A, B, x)}\left(
    C,
    \ind{\bool}\left(
      \prd{y:\rec{\bool}(\UU, A, B, x)} C((x, y)),
      g_{0},
      g_{1}
    \right),
    (1_{\bool}, b)
  \right)
  \\&\equiv
    \ind{\bool}\left(
      \prd{y:\rec{\bool}(\UU, A, B, x)} C((x, y)),
      g_{0},
      g_{1},
      1_{\bool}
    \right)(b)
  \\&\equiv
      g_{1}(b)
\end{align*}
Trivial calculations, as Coq can attest:

\exer{1.6}{56}  Show that if we define $A \times B \defeq \prd{x : \bool}
\rec{\bool}(\UU, A, B, x)$, then we can give a definition of $\ind{A \times
  B}$ for which the definitional equalities stated in \S1.5 hold
propositionally (i.e.~using equality types).

\soln Define
\[
  A \times B \defeq \prd{x : \bool} \rec{\bool}(\UU, A, B, x)
\]
Supposing that $a : A$ and $b : B$, we have an element $(a, b) : A \times B$
given by
\[
  (a, b) \defeq \ind{\bool}(\rec{\bool}(\UU, A, B), a, b)
\]
Defining this type and constructor in Coq, we have

An induction principle for $A \times B$ will, given a family $C : A \times B
\to \UU$ and a function 
\[
  g : \prd{x:A}\prd{y:B} C((x, y)),
\] 
give a function $f : \prd{x : A \times B}C(x)$ defined by
\[
  f((x, y)) \defeq g(x)(y)
\]
So suppose that we have such a $C$ and $g$.  Writing things out in terms of the
definitions, we have
\begin{align*}
  C &: \left(\prd{x:\bool}\rec{\bool}(\UU, A, B, x)\right) \to \UU \\
  g &: \prd{x:A}\prd{y:B} C(\ind{\bool}(\rec{\bool}(\UU, A, B), x, y))
\end{align*}  
We can define projections by
\[
  \fst p \defeq p(0_{\bool}) \qquad\qquad \snd p \defeq p(1_{\bool})
\]
Since $p$ is an element of a dependent type, we have
\begin{align*}
  p(0_{\bool}) &: \rec{\bool}(\UU, A, B, 0_{\bool}) \equiv A\\
  p(1_{\bool}) &: \rec{\bool}(\UU, A, B, 1_{\bool}) \equiv B
\end{align*}
which checks out.  Then we have
\begin{align*}
  g(\fst p)(\snd p) 
  &: C(\ind{\bool}(\rec{\bool}(\UU, A, B), (\fst p), (\snd p)))
  \\&\equiv 
  C(\ind{\bool}(\rec{\bool}(\UU, A, B), (\fst p), (\snd p)))
  \\&\equiv 
  C((p(0_{\bool}), p(1_{\bool})))
\end{align*}
So we have defined a function
\[
  f' : \prd{p : A \times B} C((p(0_{\bool}), p(1_{\bool})))
\]
But we need one of the type
\[
  f : \prd{p : A \times B} C(p)
\]
To solve this problem, we need to appeal to function extensionality from \S2.9.
This implies that there is a function
\[
  \funext : 
  \prd{f, g : A \times B} 
    \left(\prd{x:\bool} (f(x) =_{\rec{\bool}(\UU, A, B, x)} g(x))\right)
    \to 
    (f =_{A \times B} g)
\]
So, consider
\[
  \funext(p, (\fst p, \snd p))) 
  :
  \left(\prd{x:\bool} (p(x) =_{\rec{\bool}(\UU, A, B, x)} (p(0_{\bool}),
    p(1_{\bool}))(x))\right)
  \to 
  (p =_{A \times B} (p(0_{\bool}), p(1_{\bool})))
\]
We just need to show that the antecedent is inhabited, which we can do with
$\ind{\bool}$.  So consider the family
\begin{align*}
  E &\defeq 
  \lam{x : \bool} 
  (p(x) =_{\rec{\bool}(\UU, A, B, x)} (p(0_{\bool}), p(1_{\bool}))(x)))
  \\&\phantom{:}\equiv
  \lam{x : \bool} 
  (p(x) =_{\rec{\bool}(\UU, A, B, x)} \ind{\bool}(\rec{\bool}(\UU, A, B),
  p(0_{\bool}), p(1_{\bool}), x))
\end{align*}
We have
\begin{align*}
  E(0_{\bool})
  &\equiv
  (p(0_{\bool}) =_{\rec{\bool}(\UU, A, B, 0_{\bool})} \ind{\bool}(\rec{\bool}(\UU, A, B),
  p(0_{\bool}), p(1_{\bool}), 0_{\bool}))
  \\&\equiv
  (p(0_{\bool}) =_{\rec{\bool}(\UU, A, B, 0_{\bool})} p(0_{\bool}))
\end{align*}
Thus $\refl{p(0_{\bool})} : E(0_{\bool})$.  The same argument goes through to
show that $\refl{p(1_{\bool})} : E(1_{\bool})$.  This means that
\[
  h \defeq
  \ind{\bool}(E, \refl{p(0_{\bool})}, \refl{p(1_{\bool})})
  :
  \prd{x : \bool} (p(x) =_{\rec{\bool}(\UU, A, B, x)} (p(0_{\bool}),
  p(1_{\bool})))
\]
and thus
\[
  \funext(p, (\fst p, \snd p), h) 
  : p =_{A \times B} (p(0_{\bool}),
  p(1_{\bool}))
\]
So, by the transport principle, there is a function
\[
  (\funext(p, (\fst p, \snd p), h))_{*} : C((\fst p, \snd p)) \to C(p)
\]
and we may define
\[
  \ind{A \times B}(C, g, p) \defeq
  (\funext(p, (\fst p, \snd p), h))_{*}(g(\fst p)(\snd p))
\]
In Coq we can repeat this construction using \lstinline|Funext|.

Now, we must show that the definitional equality holds propositionally.  That
is, we must show that the type
\[
  \ind{A \times B}(C, g, (a, b)) =_{C((a, b))} g(a)(b)
\]
is inhabited.  Unfolding the left hand side gives
\begin{align*}
  \ind{A \times B}(C, g, (a, b))
  &\equiv
  (\funext((a, b), (\fst (a, b), \snd (a, b)), h))_{*}(g(\fst (a, b))(\snd (a, b)))
  \\&\equiv
  (\funext((a, b), (a, b), h))_{*}(g(a)(b))
  \\&\equiv
  \ind{=_{A\times B}}(D, d, (a, b), (a, b), \funext((a, b), (a, b), h))
  (g(a)(b))
\end{align*}
where $D(x, y, \funext((a, b), (a, b), h)) \defeq C(x) \to C(y)$ and
\[
  d \defeq \lam{x}\mathsf{id}_{C(x)} : \prd{x : A \times B}D(x, x, \refl{x})
\]
But the defining equality of 




\exer{1.7}{56} Give an alternative derivation of $\ind{=_{A}}'$ from
$\ind{=_{A}}$ which avoids the use of universes.

\exer{1.8}{56}  Define multiplication and exponentiation using
$\rec{\mathbb{N}}$.  Verify that $(\mathbb{N}, +, 0, \times, 1)$ is a semiring
using only $\ind{\mathbb{N}}$.

\soln For multiplication, we need to construct a function $\mult : \mathbb{N}
\to \mathbb{N} \to \mathbb{N}$.  Defined with pattern-matching, we would have
\begin{align*}
  \mult(0, m) &\defeq 0 \\
  \mult(\suc(n), m) &\defeq m + \mult(n, m)
\end{align*}
so in terms of $\rec{\mathbb{N}}$ we have
\[
  \mult \defeq 
  \rec{\mathbb{N}}(
  \mathbb{N} \to \mathbb{N},
  \lam{n}0,
  \lam{n}{g}{m}\add(m, g(m))
  )
\]
For exponentiation, we have the function $\expf: \mathbb{N} \to \mathbb{N} \to
\mathbb{N}$, with the intention that $\expf(e, b) = b^{e}$.  In terms of pattern
matching,
\begin{align*}
  \expf(0, b) &\defeq 1 \\
  \expf(\suc(e), b) &\defeq \mult(b, \expf(e, b))
\end{align*}
or, in terms of $\rec{\mathbb{N}}$,
\[
  \expf \defeq \rec{\mathbb{N}}(
    \mathbb{N} \to \mathbb{N},
    \lam{n}1,
    \lam{n}{g}{m}\mult(m, g(m))
  )
\]
In Coq, we can define these by

To verify that $(\mathbb{N}, +, 0, \times, 1)$ is a semiring, we need stuff
from Chapter 2.


\exer{1.9}{56}  Define the type family $\Fin : \mathbb{N} \to \UU$
mentioned at the end of \S1.3, and the dependent function $\fmax :
\prd{n : \mathbb{N}} \Fin(n + 1)$ mentioned in \S1.4.

\soln  $\Fin(n)$ is a type with exactly $n$ elements.  Essentially, we want to
recreate $\mathbb{N}$ using types; so we will replace $0$ with $\emptyt$ and
$\suc$ with a coproduct.  So we define $\Fin$ recursively:
\begin{align*}
  \Fin(0) &\defeq \emptyt \\
  \Fin(\suc(n)) &\defeq \Fin(n) + \unit
\end{align*}
or, equivalently,
\[
  \Fin \defeq \rec{\mathbb{N}}(\UU, \emptyt, \lam{C}C+\unit)
\]




\exer{1.10}{56}  Show that the Ackermann function $\ack : \mathbb{N} \to
\mathbb{N} \to \mathbb{N}$,
satisfying the following equations
\begin{align*}
  \ack(0, n) &\equiv \suc(n), \\
  \ack(\suc(m), 0) &\equiv \ack(m, 1), \\
  \ack(\suc(m), \suc(n)) &\equiv \ack(m, \ack(\suc(m), n)),
\end{align*}
is definable using only $\rec{\mathbb{N}}$.

%\soln Define
%\[
%  \ack \defeq 
%  \rec{\mathbb{N}}\big(
%    \mathbb{N} \to \mathbb{N}, 
%    \suc,
%    \lam{m}{r}
%      \rec{\mathbb{N}}\big(
%        \mathbb{N},
%        r(1),
%        \lam{n}{s}r(s(r, n))
%      \big)
%  \big)
%\]
%To show that the defining equalities hold, we'll suppress the first argument of
%$\rec{\mathbb{N}}$ for clarity.  For the first we have
%\begin{align*}
%  \ack(0, n)
%  \equiv
%  \rec{\mathbb{N}}\big(
%    \suc,
%    \lam{m}{r}
%      \rec{\mathbb{N}}\big(
%        r(1),
%        \lam{n}{s}r(s(r, n))
%      \big),
%    0
%  \big)(n)
%  \equiv
%  \suc(n)
%\end{align*}
%For the second,
%\begin{align*}
%  &\phantom{\equiv} \ack(\suc(m), 0)
%  \\&\equiv
%  \rec{\mathbb{N}}\big(
%    \suc,
%    \lam{m}{r}
%      \rec{\mathbb{N}}\big(
%        r(1),
%        \lam{n}{s}r(s(r, n))
%      \big),
%    \suc(m)
%  \big)(0)
%  \\&\equiv
%  \big(
%  \big(\lam{r}
%    \rec{\mathbb{N}}\big(
%      r(1),
%      \lam{n}{s}r(s(r, n))
%    \big)\big)
%  \rec{\mathbb{N}}\big(
%    \suc,
%    \lam{m}{r}
%      \rec{\mathbb{N}}\big(
%        r(1),
%        \lam{n}{s}r(s(r, n))
%      \big),
%    m
%  \big)
%  \big)(0)
%  \\&\equiv
%  \big(
%  \big(\lam{r}
%    \rec{\mathbb{N}}\big(
%      r(1),
%      \lam{n}{s}r(s(r, n))
%    \big)\big)
%    \ack(m, -)
%  \big)(0)
%  \\&\equiv
%  \rec{\mathbb{N}}\big(
%  \ack(m, 1),
%  \lam{n}{s}\ack(m, s(\ack(m, -), n)),
%  0
%  \big)
%  \\&\equiv
%  \ack(m, 1)
%\end{align*}
%Finally, using the first few steps of this second calculation again,
%\begin{align*}
%  &\phantom{\equiv} \ack(\suc(m), \suc(n))
%  \\&\equiv
%  \rec{\mathbb{N}}\big(
%    \suc,
%    \lam{m}{r}
%      \rec{\mathbb{N}}\big(
%        r(1),
%        \lam{n}{s}r(s(r, n))
%      \big),
%    \suc(m)
%  \big)(\suc(n))
%  \\&\equiv
%  \rec{\mathbb{N}}\big(
%  \ack(m, 1),
%  \lam{n}{s}\ack(m, s(\ack(m, -), n)),
%  \suc(n)
%  \big)
%  \\&\equiv
%  (\lam{s}\ack(m, s(\ack(m, -), n)))
%  \rec{\mathbb{N}}\big(
%  \ack(m, 1),
%  \lam{n}{s}\ack(m, s(\ack(m, -), n)),
%  n
%  \big)
%\end{align*}
%
%
%

%DONE
\exer{1.11}{56}  Show that for any type $A$, we have $\lnot\lnot\lnot A \to
\lnot A$.

\soln Suppose that $\lnot\lnot\lnot A$ and $A$.  Supposing further that $\lnot
A$, we get a contradiction with the second assumption, so $\lnot \lnot A$.  But
this contradicts the first assumption that $\lnot\lnot\lnot A$, so $\lnot A$.
Discharging the first assumption gives $\lnot\lnot\lnot A \to \lnot A$.

In type-theoretic terms, the first assumption is $x : ((A \to \emptyt) \to
\emptyt) \to \emptyt$, and the second is $a : A$.  If we further assume that
$h : A \to \emptyt$, then $h(a) : \emptyt$, so discharging the $h$ gives
\[
  \lam{h:A \to \emptyt}h(a) : (A \to \emptyt) \to \emptyt
\]
But then we have
\[
  x(\lam{h : A \to \emptyt}h(a)) : \emptyt
\]
so discharging the $a$ gives
\[
  \lam{a:A}x(\lam{h : A \to \emptyt}h(a)) : A \to \emptyt
\]
And discharging the first assumption gives
\[
  \lam{x:((A\to\emptyt)\to\emptyt)\to\emptyt}{a:A}x(\lam{h : A \to
    \emptyt}h(a)) :
  (((A \to \emptyt) \to \emptyt) \to \emptyt) \to (A \to \emptyt)
\]
This is automatic for Coq, though not trivial
One nice thing is that we can get a proof out of Coq by printing this
\lstinline|Goal|.  It returns
\begin{lstlisting}
fun (A : Type) (X : ~ ~ ~ A) (X0 : A) => X (fun X1 : A -> Empty => X1 X0) 
    : forall A : Type, ~ ~ ~ A -> ~ A
\end{lstlisting}


\exer{1.12}{56}  Using the propositions as types interpretation, derive the
following tautologies.
\begin{enumerate}
  \item If $A$, then (if $B$ then $A$).
  \item If $A$, then not (not $A$).
  \item If (not $A$ or not $B$), then not ($A$ and $B$).
\end{enumerate}

\soln (i)  Suppose that $A$ and $B$; then $A$.  Discharging the
assumptions, $A \to B \to A$.  That is, we
have 
\[
  \lam{a:A}{b:B}a : A \to B \to A
\]
and in Coq,

(ii)  Suppose that $A$.  Supposing further that $\lnot A$ gives a
contradiction, so $\lnot\lnot A$.  That is,
\[
  \lam{a:A}{f:A \to \emptyt}f(a) : A \to (A \to \emptyt) \to \emptyt
\]
(iii)
Finally, suppose $\lnot A \lor \lnot B$.  Supposing further that $A \land B$
means that $A$ and that $B$.  There are two cases.  If $\lnot A$, then we have
a contradiction; but also if $\lnot B$ we have a contradiction.  Thus $\lnot (A
\land B)$.

Type-theoretically, we assume that $x : (A \to\emptyt) + (B \to\emptyt)$ and $z
: A \times B$.  Conjunction elimination gives $\fst z : A$ and $\snd z : B$.
We can now perform a case analysis.  Suppose that $x_{A} : A \to \emptyt$; then
$x_{A}(\fst z) : \emptyt$, a contradicton; if instead $x_{B} : B \to \emptyt$,
then $x_{B}(\snd z) : \emptyt$.  By the recursion principle for the coproduct,
then,
\[
  f(z) \defeq \rec{(A\to\emptyt)+(B\to\emptyt)}(
    \emptyt,
    \lam{x}x(\fst z),
    \lam{x}x(\snd z)
  )
  :
  (A \to \emptyt) + (B \to \emptyt) \to \emptyt
\]
Discharging the assumption that $A \times B$ is inhabited, we have
\[
  f : 
  A \times B \to (A \to \emptyt) + (B \to \emptyt) \to \emptyt
\]
So
\[
  \mathsf{swap}(A\times B, (A\to\emptyt)+(B\to\emptyt), \emptyt, f)
  :
  (A \to \emptyt) + (B \to \emptyt) 
  \to 
  A \times B 
  \to \emptyt
\]



\exer{1.13}{57}  Using propositions-as-types, derive the double negation of the
principle of excluded middle, i.e.~prove \emph{not (not ($P$ or not $P$))}.

\soln  Suppose that $\lnot(P \lor \lnot P)$.  Then, assuming $P$, we have
$P \lor \lnot P$ by disjunction introduction, a contradiction.  Hence
$\lnot P$.  But disjunction introduction on this again gives $P \lor \lnot P$,
a contradiction.  So we must reject the remaining assumption, giving
$\lnot\lnot(P \lor \lnot P)$.

In type-theoretic terms, the initial assumption is that $g : P + (P \to
\emptyt) \to \emptyt$.  Assuming $p : P$, disjunction introduction results in
$\inl(p) : P + (P \to \emptyt)$.  But then $g(\inl(p)) : \emptyt$, so we
discharge the assumption of $p : P$ to get
\[
  \lam{p:P}g(\inl(p)) : P \to \emptyt
\]
Applying disjunction introduction again leads to contradiction, as
\[
  g(\inr(\lam{p:P}g(\inl(p)))) : \emptyt
\]
So we must reject the assumption of $\lnot( P \lor \lnot P)$, giving the
result:
\[
  \lam{g:P + (P \to \emptyt) \to \emptyt}g(\inr(\lam{p:P}g(\inl(p)))) 
  : 
  (P + (P \to \emptyt) \to \emptyt) \to \emptyt
\]

Finally, in Coq,


\exer{1.14}{57}  Why do the induction principles for identity types not allow
us to construct a function $f : \prd{x:A}\prd{p:x=x}(p = \refl{x})$ with the
defining equation
\[
  f(x, \refl{x}) \defeq \refl{\refl{x}}\qquad?
\]

\exer{1.15}{57} Show that indiscernability of identicals follows from path
induction.

%\soln The indiscernability of identicals states that for every family $C : A
%\to \UU$, there is a function 
%\[
%  f: \prd{x, y : A}\prd{p: x=_{A} y} C(x) \to C(y)
%\]
%such that $f(x, x, \refl{x}) \defeq \idfunc{C(x)}$.  Path induction says
%that given a family 
%\[
%  C : \prd{x, y : A}(x =_{A} y) \to \UU
%\]
%and a function $c: \prd{x:A} C(x, x, \refl{x})$, there is a function 
%\[
%  f: \prd{x, y :A}\prd{p: x=_{A} y} C(x, y, p)
%\]
%such that $f(x, x, \refl{x}) \defeq c(x)$.
